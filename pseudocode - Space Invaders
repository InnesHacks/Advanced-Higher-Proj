1 import pygame
2 import os
3 import time
n
6 pygame.init ()
-
8 White - (255, 255, 255)
9 Black = (0, 0, 0)
10
11 FSettins Class
12 class Settings () :
13
def
1n1t_ _(selé) :
14
15
variables store the state of the settings self.musicstate - True
16
self.musictype = True
17
self.soundeffects = True
18
19
20
21
22
23
24
• 25
26
27
28
29
30
31
32
33
34
35
36
37
#procedure to get the settings from the settings file def get_settings (self):
#checks the seltings file exists if not os.path.isfile ("settings.txt"):
#it the file doesn't exist create the file print ("file not there")
self.wr-te_file (False)
else:
#if it does exist open the file and split the string #by commas into an array settingsfile - open ("settings.txt", "r")
settings = settingsfile.read() .split (",")
settingsfile.close ()
print (settings)
#run through the array of setting strings and
#set the state variables to the appropriate conversions of the values #if the string is "frue" the variabel will be set to true if not it will be set to false
self.musicstate = settings [0] == "True"
settings [1] = "True"
self.musictype -
self.soundeffects = settings [2] == "True"
38
39
40
41
42
def write file(self, remove):
if remove:
#delete the file
#if the remove variable is true (will be the case if the file already exists)
4344
45
46
47
48
49
50
51
52
53
os. remove ("settings.txt")
#create the file again
settings = open ("settings.txt", "w")
#fill the file with string verisions of the settings variables #delimited by commas for later separation settings.write(str (self.musicstate) + ",")
settings.wr-te(str (self.musictype)+ ",")
settings.wr-te(str (self .soundeffects))
settings.close
54 #class for each highscore holds the score
55 #and the initials for the highscore
56 class Highscore ():
57
def
init_
_(self, name, value):
58
fstores the initials
59
self. name = name
60
stores the score
61
self.value = value
62
63 #Class for the scoreboard
64 class ScoreBoard () :
65
def init (self):
66
#list of scores
67
self.scores = lI
68
#score of current game
69
self.current_score = 0
70
71
72
73
74
75
76
77
78
#procedure to determine if the current_score is a new highscore def check_score (self):
#if there are less than 10 highscores if len (self.scores) < 10:
#return true return True
#otherwise else:
#if the current score is greater than the value of any of the current scores
79
80
81
82
for score in self.scores:
if self.current_score > score. value:
#return true return True
83
84
85
86
87
procedure to get the scoreboard from the highscores file def get_highscores (self) :
#make sure the highscores list is empty self.scores.clear (
88
›dueuv'134
135
highscoresfile = open ("highscores.txt",
136
#if the fill parameter is true (will be the case if a new highscore needs to be added) if fill:
137
138
#add each score from the scores list to the file deliited by a comma
count = 0
139
140
if len (self.scores) > 0:
141
for score in self.scores:
142
highscoresfile.write(score.name + ",")
143
#if the current element is the last in the list
144
if count == len (self.scores) - 1:
145
#add the element but don't add a comma after it
146
highscoresfile.write(str (score.value))
else:
147
148
fotherwise add the element and add the comma delimit
149
highscoresfile.write(str (score.value) + ',')
count += 1
150
hignscoresfile.close ()
151
152 #Image Class
153 class Image (pygame.sprite.Sprite):
154
def _init_ _ (self, path, xpos, ypos) :
155
pygame.sprite.Sprite.
init_ (self)
156
Fallows the class to refer to the current window surface
157
self.surface - pygame.display.get_surface ()
158
#loads the image from the path passed in
159
self.image = pygame. image. load (path)
160
#stores the given co-ords
161
self.givenpos = (xpos, ypos)
162
#creates an array to store the position for the image
163
self.position = Ixpos - (self.image.get width() // 2), ypos - (self.image.get height () // 2)]
164
165
#procedure to display the image
166
def display_Image (self) :
167
self.surface.blit (self.image, self.position)
168
169
#procedure to scale the image
170
def resize_Image (self, scalefactor) :
171
#changes the size of the image
172
self.image = pygame.transform.scale (self. image, (int (self. image.get_width () * scalefactor), int (self. image.get_height () * scalefactor)))
173
Amoves the image to maintain the center
174
self.position = (self.givenpos [0l - (self. image.get _width() // 2), self.givenpos [1] - (self.image.get_height () // 2))
175
176 #Text Class
177 class Text (pygame.sprite.Sprite):
178
def
_init_(self, content, font_size, xpos, ypos, colour = White):
179
pygame.sprite.Sprite._ init_ (selt)
1a8ue:
salad 180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
#Initializes the font if needed if not pygame.font.get init:
pygame.cont.init()
fallows the class to refer to the current window surface
self.surface = pygame.display.get_surface ()
#creates the font that will be used for the text self. font. - pygame. font. Font ('resources/font/ca.ttf', font_size) #creastes the text
self.text - self.font.render (content, False, colour) #saves colour for use when changing the text self.colour colour
#saves given for use when changing the text
self.givenpos = (xpos, yPos)
#creates array to store the position for the text
self.position = (xpos - (self.text.get_width() // 2), ypos - (self.text.get_height () // 2) |
print ((self.text.get _width(), self.text.get height ()))
#procedure to display the text def display_text (self):
self.surface.blit (self.text, self.position)
#procedure to change the content of the text object def change_text (self, newtext, drawmethod):
#changes the text
self.text = self.font.render (newtext, False, self.colour)
#move the text so the center is the same
self.position = [self.givenpos [0] - (self.text.get_width () // 2), self.givenpos [1] - (self.text.get_height () // 2)]
#redraws the current page drawmethod (1 import pygame
2 from basic Resources import *
w
4 pygame.init ()
6 #Player Class
7 class Player (pygame.sprite.Sprite):
def init (self, xpos) :
pygame.sprite.Sprite.
10
init (self)
11
farray to hold the position of the player
12
self.position = [xpos, 6331
13
#indicates if the player is dead or not
self.dead = False
14
15
#holds the number of lives the player has left
self.lives = 3
16
#image obeict
17
self.image = Image ('resources/sprite Images/ship/ship.png', xpos, 633)
18
self.image.resize Image (2)
19
#gets and stores the rectangel of the image
20
self.rect = self.image.image.get rect ()
21
self.rect.center - self.position
22
23
24
25
26
27
28
29
30
#procedure to kill the player def kill player (self, drawmethod) :
#decrease the number of lives the player has by one self.lives -= 1 #do five times
for count in range (0, 5):
#change the image to ship explode one
self. image = Image ('resources/sprite_Images/ship/ship_explode_one.png', self.position [0], self.position [1) - 4)
31
32
33
34
35
#draw the display drawmethod ( )
#wait 0.05 seconds time.sleep (0.05)
#change the image to ship explode two
self.image = Image ('resources/sprite_Images/ship/ship_explode_two.png', self.position [0], self.position [L] + 3)
36
37
38
39
40
41
12
13
self.image.resize Image (2)
#draw the display drawmethod ()
#wait 0.05 seconds time.sleep (0.05)
#wait 0.3 seconds time.sleep (0.344
45
46
47
#set the position to 480, 633
self.position = [480, 633]
#change the image back to normal
48
49
50
51
52
53
54
55
self.image = Image ('resources/sprite_Images/ship/ship.png', self.position [0], self.position [1])
self.image.resize Image (2)
#get and store the rectangel of the new image
self.rect = self.image.image.get rect ()
self.rect.center = self.position
#draw the display drawmethod ()
#wait 0.5 seconds time.sleep (0.5)
56
57
58
59
60
61
62
63
64
65
66
67
#procedure to move the player def move (self, xdist):
if not self.dead:
#chang the x position by xdist self.position [0] += xdist
#change the image to an image in the new position
self.image = Image ('resources/sprite Images/ship/ship.png', self.position [0], self.position [1])
self.image.resize Image (2)
#get and store the new rectangle
self.rect = self.image.image.get rect ()
self.rect.center = self.position
68
69
70
71
72
73
74
75
76
77
#procedure to display the player def display player (self):
#display the image
self.image.display_Image ()
#if the player has 0 lives left if self.lives == 0:
#set the dead indicator to true
self.dead = True
78
79 #Shot Class
80 class Shot (pygame.sprite.Sprite):
81
def init (self, xpos):
82
pygame.sprite. Sprite. init (self)
83
#array to hold the position of the shot
BA
self.position - [xpos, 633]
85
#image object for the image of the shot
86
self.image = Image ('resources/sprite_Images/shot/player_Shot_Green.png', self.position(0], self.position[1])
87
88
89
self.image.resize Image (2)
#indicates if the shot is moving
self.moving = Tru90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
#gets and stores the rectangle of the in
self.rect = self. image.image.get rect ()
self.rect.center = self.position
#prodecure to move the shot def move (self):
#the the moving indicator is true if self.moving:
#move the shot up by 10
self.position |1] -- 10
#the shot is bellow y=525
•
if self.position [1] > 525:
#change the image to the green version in the new position
self.image = Image ('resources/sprite_Images/shot/player_Shot_Green.png', self.position [0], self.position [1))
else:
#redefine the image with the new position
self.image = Image ('resources/sprite Images/shot/player Shot.png', self.position [0], self.position [1])
self. image.resize Image (2)
#get and stoer the new rectangle
self.rect = self. image. image.get_rect ()
self.rect.center = self.position
#prodecure to blow up the shot def blowup (self):
#change the image to the mask
self.image = Image ('resources/sprite_Images/shot/player_Shot_Black _Mask.png', self.position[0], self.position [1])
#set the moving indicator to false
self.moving = False
#prodecure to display the shot def display shot (self) :
#display the image self. image.display Image (1 import pygame
2 from basic_Resources import *
m
4 pygame.init ()
in
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
6 #Alien Class
7 class Alien (pygame.sprite.Sprite):
def init _(self, openpath, closepath, xpos, ypos) :
pygame.sprite.Sprite.
init (self)
#array to hold the center position of the button
self.position = (xpos, ypos]
#holds the path to the open image
self.open image = openpath
#holds the path to the close image
self.close image = closepath
#indicates the current image in use
self.which image = True
#determines weather or not the alien is dead
self.dead = False
#the image object to be displayed
self.image = Image (self.open_image, xpos, ypos)
self.image.resize Image (2)
#the number of points the alien rewards
self.points = 0
#gets and stores the rectangle of the image
self.rect = self.image.image.get_ rect ()
self.rect.center = self.position
#procedure to kill the aien def kill alien (self):
#set the dead variable to truc
self.dead = True
#change the image self.switch image ()
#return the number of points the alien rewards return self.points
#prodecure to change the alien's image if appropriate def switch image (self):
#the the dead variable is true if self.dead:
#change the image to the blast imag44
45
46
47
48
49
50
51
52
53
self.image = Image ('resources/sprite lages/aliens/alien Blast.png', self.posit fol, self.position (11)
self.image.resize Image (2)
#other wise if the which image is true elif self.which image:
#change the image to the closed alien image
self.image - Image (self.close_image, self.position[01, self.position[1l) self.image.resize_Image (2) #make which image false
self.which_image = False
else:
54
55
56
57
58
#change the image to the open alien image
self.image = Tmage (self.open _image, self.position [0], self.position [1])
self.image.resize Image (2)
#make which image false self.which image - True
59
60
61
62
#get and store the new rectangle of the image
self.rect = self. image. image.get_rect ()
self.rect.center = self.position
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
#prodecure to move the current alien def move (self, xdist, ydist):
#if it's not dead then move and switch image if not self.dead:
#change the x and y positions by the respective changes self.position [0] += xdist self.position[1] +- ydist.
#call the switch image procedure self.switch image ()
#otherwise else:
#remove alien sprite from all sprite groups print ('dead')
self.kill ()
78
79
80
81
#procedure to display the alien def display alien (self):
self. image.display_Image ()
82
83 #Subclass of Alien with the 10pt alien image paths and point set to 10
84 class Alien10 (Alien):
85
def
init_
(self, xpos, ypos) :
86
Alien.
init (self, 'resources/sprite_Images/aliens/10pts_Open.png','resources/sprite_Images/aliens/10pts_Closed.png', xpos, ypos)
87
self.points = 10
88
89 #Subclass of Alien with the 20pt alien image paths and point set to 290 class Alien20 (Alien):
91
def
92
init
Alien.
(self, xpos, ypos) :
init
93
(self, 'resources/sprite Images/aliens/20pts Open.png', 'resources/sprite _Images/aliens/20pts Closed.png', xpos, ypos)
self.points = 20
94
95 #Subclass of Alien with the 30pt alien image paths and point set to 30
96 class Alien30 (Alien):
97
def init
98
_(self, xpos, ypos) :
Alien.
init
0 Q
100
self.points = 30
(self, 'resources/sprite Images/aliens/30pts Open.png', 'resources/sprite _Images/aliens/30pts_Closed.png', xpos, ypos)
101 #Mother Ship Class
102 class Mother Ship (pygame.sprite.Sprite):
103
def init (self):
104
pygame.sprite.Sprite._
105
init (self)
#array to hold the center position of the button
106
self.position = [1000, 401
107
#the image object to be displaved
108
self.image - Image ('resources/sprite_Images/aliens/mother_Ship.png', self.position [0l, self.position [11)
109
self.image.resize Image (2)
110
#gets and stores the rectangle of the image
111
self.rect = self.image.image.get rect ()
112
self.rect.center = self.position
113
114
#procedure to move the mother ship
115
def move (self) :
116
#change the x position by -4
117
self.position [0] -= 4
118
#redefine the image with the new position
119
self.image = Image ('resources/sprite_Images/aliens/mother_Ship.png', self.position [0], self.position (1])
120
self.image.resize_Image (2)
121
#get and store the new rectangle
122
self.rect = self.image.image.get_rect ()
123
self.rect.center = self.position
124
125
#procedure to display mother ship
126
def display_ship (self):
127
#display the image of the ship
128
self. image.display_Image ()
129
130 #Alien Shot Class
131 class Alien_Shot (pygame.sprite.Sprite):
132
def init (self, xpos, ypos, left, right, mask, speed):
133
pygame.sprite.Sprite.
init_ (self)
#array to hold the center position of the button
134
135
self.position = [xpos, ypos]
Arran
Амон
documA
